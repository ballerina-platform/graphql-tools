/*
 * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

plugins {
    id 'java'
    id 'jacoco'
    id "com.github.johnrengelman.shadow" version "5.2.0"
}

ext.ballerinaLangVersion = project.ballerinaLangVersion
ext.testngVersion = project.testngVersion
ext.slf4jVersion = project.slf4jVersion
ext.commonsLoggingVersion = project.commonsLoggingVersion
ext.commonsIoVersion = project.commonsIoVersion
ext.graphqlJavaVersion = project.graphqlJavaVersion
ext.googleGuavaVersion = project.googleGuavaVersion
ext.snakeYamlVersion = project.snakeYamlVersion
ext.orgJsonVersion = project.orgJsonVersion
ext.picocliVersion = project.picocliVersion
ext.stdlibIoVersion = project.stdlibIoVersion
ext.stdlibLogVersion = project.stdlibLogVersion
ext.stdlibMimeVersion = project.stdlibMimeVersion
ext.stdlibAuthVersion = project.stdlibAuthVersion
ext.stdlibCacheVersion = project.stdlibCacheVersion
ext.stdlibTimeVersion = project.stdlibTimeVersion
ext.stdlibCryptoVersion = project.stdlibCryptoVersion
ext.stdlibTaskVersion = project.stdlibTaskVersion
ext.stdlibFileVersion = project.stdlibFileVersion
ext.stdlibHttpVersion = project.stdlibHttpVersion
ext.stdlibUrlVersion = project.stdlibUrlVersion
ext.stdlibXmldataVersion = project.stdlibXmldataVersion
ext.puppycrawlCheckstyleVersion = "8.18"

configurations {
    balTools
}

allprojects {
    apply plugin: 'checkstyle'

    repositories {
        mavenLocal()

        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/*'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }

        maven {
            url = 'https://maven.wso2.org/nexus/content/repositories/releases/'
        }
        
        maven {
            url = 'https://maven.wso2.org/nexus/content/groups/wso2-public/'
        }

        maven {
            url = 'https://maven.wso2.org/nexus/content/repositories/orgballerinalang-1614'
        }

        maven {
            url = 'https://repo.maven.apache.org/maven2'
        }

        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    checkstyle {
        toolVersion '8.16'
        configFile = file("$rootProject.projectDir/config/checkstyle/checkstyle.xml")
    }

    def excludePattern = '**/module-info.java'
    tasks.withType(Checkstyle) {
        configFile file("${rootProject.projectDir}/config/checkstyle/checkstyle.xml")
        exclude excludePattern
    }

    ext {
        snapshotVersion= '-SNAPSHOT'
        timestampedVersionRegex = '.*-\\d{8}-\\d{6}-\\w.*\$'
    }
}

dependencies {
    implementation "org.ballerinalang:ballerina-lang:${ballerinaLangVersion}"
    implementation "org.ballerinalang:ballerina-parser:${ballerinaLangVersion}"
    implementation "org.ballerinalang:ballerina-cli:${ballerinaLangVersion}"
    implementation "org.ballerinalang:formatter-core:${ballerinaLangVersion}"
    implementation "org.ballerinalang:ballerina-tools-api:${ballerinaLangVersion}"
    implementation "io.ballerina.stdlib:http-native:${stdlibHttpVersion}"
    implementation "info.picocli:picocli:${picocliVersion}"
    testImplementation "org.testng:testng:${testngVersion}"
    implementation "commons-io:commons-io:${commonsIoVersion}"
    implementation "commons-logging:commons-logging:${commonsLoggingVersion}" // NEW
    implementation "org.yaml:snakeyaml:${snakeYamlVersion}" // NEW
    shadow "com.graphql-java:graphql-java:${graphqlJavaVersion}" // NEW
    shadow "com.google.guava:guava:${googleGuavaVersion}" // NEW
    shadow "org.json:json:${orgJsonVersion}" // NEW
}

shadowJar {
    configurations = [project.configurations.shadow]
}

build.dependsOn(shadowJar)

test {
    useTestNG()
}

task codeCoverageReport(type: JacocoReport) {

    executionData fileTree(project.rootDir.absolutePath).include("**/build/coverage-reports/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }
    reports {
        xml.enabled(true)
        html.enabled(true)
        csv.enabled(true)
        xml.destination(new File("${buildDir}/reports/jacoco/report.xml"))
        html.destination(new File("${buildDir}/reports/jacoco/report.html"))
        csv.destination(new File("${buildDir}/reports/jacoco/report.csv"))
    }

    onlyIf = {
        true
    }
}
