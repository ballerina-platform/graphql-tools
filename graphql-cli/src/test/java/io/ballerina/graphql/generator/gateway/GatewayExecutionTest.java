/*
 *  Copyright (c) 2023, WSO2 LLC. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 */

package io.ballerina.graphql.generator.gateway;

import io.ballerina.graphql.generator.gateway.exception.GatewayGenerationException;
import org.testng.Assert;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

/**
 * Class to test gateway generated by sending requests to the gateway.
 */
public class GatewayExecutionTest {
    private static final String GATEWAY_URL = "http://localhost:9000";
    private static final String ASTRONAUT_SUBGRAPH_URL = "http://localhost:5001";
    private static final String MISSION_SUBGRAPH_URL = "http://localhost:5002";

    private static final Path supergraphSdl =
            Paths.get("src/test/resources/federationGateway/supergraphSchemas/Supergraph.graphql");
    private static final Path services = Paths.get("src/test/resources/federationGateway/subgraphServices");

    private Path tmpDir;
    Process astronautServiceProcess;
    Process missionsServiceProcess;
    Process gatewayProcess;

    @BeforeClass
    public void setup() throws IOException, GatewayGenerationException {
        this.tmpDir = Files.createTempDirectory("graphql-gateway-" + System.nanoTime());
        File gatewayExec = TestUtils.generateGatewayJar(supergraphSdl, tmpDir);
        gatewayProcess = new ProcessBuilder("java", "-jar", gatewayExec.getAbsolutePath()).start();
        astronautServiceProcess = new ProcessBuilder("java", "-jar",
                TestUtils.getBallerinaExecutableJar(
                                services.resolve("astronautService").toAbsolutePath(), tmpDir)
                        .getAbsolutePath()).start();
        missionsServiceProcess = new ProcessBuilder("java", "-jar",
                TestUtils.getBallerinaExecutableJar(
                                services.resolve("missionsService").toAbsolutePath(), tmpDir)
                        .getAbsolutePath()).start();

        TestUtils.waitTillUrlIsAvailable(gatewayProcess, ASTRONAUT_SUBGRAPH_URL);
        TestUtils.waitTillUrlIsAvailable(astronautServiceProcess, MISSION_SUBGRAPH_URL);
        TestUtils.waitTillUrlIsAvailable(missionsServiceProcess, GATEWAY_URL);
    }

    @AfterClass
    public void cleanup() throws IOException {
        astronautServiceProcess.destroy();
        missionsServiceProcess.destroy();
        gatewayProcess.destroy();
        TestUtils.deleteDirectory(tmpDir);
    }

    @Test(description = "Test gateway with query requests",
            dataProvider = "QueryRequestResponseDataProvider")
    public void testGatewayQueryExecution(String requestFile, String responseFile) throws IOException {
        String query = TestUtils.getRequestContent(requestFile);
        String expectedResponse = TestUtils.getResponseContent(responseFile);
        String response = TestUtils.getGraphqlQueryResponse(GATEWAY_URL, query);
        Assert.assertEquals(response.toString(), expectedResponse);
    }

    @DataProvider(name = "QueryRequestResponseDataProvider")
    public Object[][] getQueryFileNames() {
        return new Object[][] {
                {"request1", "response1"},
                {"request2", "response2"},
        };
    }

    @Test(description = "Test gateway with mutation requests",
            dataProvider = "MutationRequestResponseDataProvider")
    public void testGatewayMutationExecution(String requestFile, String responseFile) throws IOException {
        String query = TestUtils.getRequestContent(requestFile);
        String expectedResponse = TestUtils.getResponseContent(responseFile);
        String response = TestUtils.getGraphqlMutationResponse(GATEWAY_URL, query);
        Assert.assertEquals(response.toString(), expectedResponse);
    }

    @DataProvider(name = "MutationRequestResponseDataProvider")
    public Object[][] getMutationFileNames() {
        return new Object[][] {
                {"request3", "response3"}
        };
    }

}
