schema
@link(url: "https://specs.apollo.dev/link/v1.0")
@link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION) {
    query: Query
}

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(
    graph: join__Graph
    requires: join__FieldSet
    provides: join__FieldSet
    type: String
    external: Boolean
    override: String
    usedOverridden: Boolean
) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(
    graph: join__Graph!
    interface: String!
) repeatable on OBJECT | INTERFACE

directive @join__type(
    graph: join__Graph!
    key: join__FieldSet
    extension: Boolean! = false
    resolvable: Boolean! = true
    isInterfaceObject: Boolean! = false
) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(
    graph: join__Graph!
    member: String!
) repeatable on UNION

directive @link(
    url: String
    as: String
    for: link__Purpose
    import: [link__Import]
) repeatable on SCHEMA

type Astronaut
@join__type(graph: ASTRONAUTS, key: "id")
@join__type(graph: MISSIONS, key: "id") {
    id: ID!
    name: String @join__field(graph: ASTRONAUTS)
    missions: [Mission] @join__field(graph: MISSIONS)
}

scalar join__FieldSet

enum join__Graph {
    ASTRONAUTS @join__graph(name: "astronauts", url: "http://localhost:4001")
    MISSIONS @join__graph(name: "missions", url: "http://localhost:4002")
}

scalar link__Import

enum link__Purpose {
    """
    `SECURITY` features provide metadata necessary to securely resolve fields.
    """
    SECURITY

    """
    `EXECUTION` features provide metadata necessary for operation execution.
    """
    EXECUTION
}

type Mission @join__type(graph: MISSIONS) {
    id: ID!
    crew: [Astronaut]
    designation: String!
    startDate: String
    endDate: String
}

type Query @join__type(graph: ASTRONAUTS) @join__type(graph: MISSIONS) {
    astronaut(id: ID!): Astronaut @join__field(graph: ASTRONAUTS)
    astronauts: [Astronaut] @join__field(graph: ASTRONAUTS)
    mission(id: ID!): Mission @join__field(graph: MISSIONS)
    missions: [Mission] @join__field(graph: MISSIONS)
}
